from typing import Optional, Dict
import logging
from aiogram.types import CallbackQuery
from handlers.common.constans import STAGE_INDEX, PHOTO_STAGES, TOTAL_STAGES
from handlers.orderss.states import OrderStates
from utils.data import get_dealer_by_id, get_company_by_id

logger = logging.getLogger(__name__)


def get_stage_by_state(state) -> Optional[Dict]:
    if state == OrderStates.photo_additional:
        return {
            "state": OrderStates.photo_additional,
            "title": "üì∑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "description": "–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
            "required": False,
            "stage_num": len(PHOTO_STAGES) + 1,
        }
    index = STAGE_INDEX.get(state)
    return PHOTO_STAGES[index] if index is not None else None


def get_next_stage(current_state) -> Optional[Dict]:
    current_index = STAGE_INDEX.get(current_state)
    if current_index is not None and current_index < len(PHOTO_STAGES) - 1:
        return PHOTO_STAGES[current_index + 1]
    return None


def build_order_info_text(order: Dict) -> str:
    info_parts = [f"üöó <b>{order.get('brand', '')} {order.get('model', '')}</b>"]

    if order.get("url"):
        info_parts.append(f"<b>{order['url']}</b>")

    company_id = order.get("company_id")
    if company_id:
        company = get_company_by_id(company_id)
        if company:
            info_parts.append(
                "\nüè¢<b> –ö–æ–º–ø–∞–Ω–∏—è: </b>\n"
                + "\n".join(
                    [
                        company.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                    ]
                )
            )
    dealer_id = order.get("dealers_id")
    if dealer_id:
        dealer = get_dealer_by_id(dealer_id)
        if dealer:
            dealer_info = []
            if dealer.get("name"):
                dealer_info.append(dealer["name"])
            if dealer.get("phone"):
                dealer_info.append(f"{dealer['phone']}")
            if dealer.get("address"):
                dealer_info.append(f"{dealer['address']}")
            info_parts.append("\n<b>üìç –î–∏–ª–µ—Ä:</b>\n" + "\n".join(dealer_info))

    info_parts.append("\n–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Å—ä–µ–º–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?")

    return "\n".join(info_parts)


def build_stage_message(stage: Dict) -> str:
    return (
        f"<b>{stage['title']}</b>\n"
        f"–≠—Ç–∞–ø {stage['stage_num']} –∏–∑ {TOTAL_STAGES}\n\n"
        f"üìù {stage['description']}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ:"
    )


async def safe_edit_message(
    callback: CallbackQuery, text: str, reply_markup=None, **kwargs
):
    try:
        await callback.message.edit_text(text=text, reply_markup=reply_markup, **kwargs)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.message.answer(text=text, reply_markup=reply_markup, **kwargs)
