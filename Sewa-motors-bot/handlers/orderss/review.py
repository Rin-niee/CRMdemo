from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import config
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from handlers.admin.notifications import (
    send_files_to_admin,
    notify_admin_manager_decline,
)
import logging
from utils.data import update_order_status, get_order_by_id, clear_manager_for_order, get_dealer_by_id

router = Router()
logger = logging.getLogger(__name__)


def is_admin(user_id: int) -> bool:
    return config.is_admin(user_id)


class AdminReworkStates(StatesGroup):
    waiting_task_text = State()
    waiting_decline_reason = State()


@router.callback_query(F.data.startswith("admin_rework_with_task_"))
async def admin_rework_with_task_start(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer(
            "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É!",
            show_alert=True,
        )
        return
    order_id = callback.data[len("admin_rework_with_task_") :]
    await state.update_data(rework_order_id=order_id)
    await state.set_state(AdminReworkStates.waiting_task_text)
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )
    await callback.answer()


@router.message(AdminReworkStates.waiting_task_text, F.text)
async def capture_admin_task_text(message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("rework_order_id")
    if not is_admin(message.from_user.id):
        return
    task_text = message.text or ""
    order = get_order_by_id(order_id)
    if not order:
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await state.clear()
        return
    photographer_id = order.get("manager_id")
    if not photographer_id:
        await message.answer("–û—Å–º–æ—Ç—Ä—â–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!")
        await state.clear()
        return

    update_order_status(order_id, "progress")
    rework_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì∑ –ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ—Ä–∞–±–æ—Ç–∫–µ",
                    callback_data=f"continue_order_{order_id}",
                )
            ]
        ]
    )

    dealer_block = ""
    dealer_id = order.get("dealers_id")
    if dealer_id:
        dealer = get_dealer_by_id(dealer_id)
        if dealer:
            parts = []
            if dealer.get("name"):
                parts.append(dealer["name"])
            if dealer.get("phone"):
                parts.append(str(dealer["phone"]))
            if dealer.get("address"):
                parts.append(dealer["address"])
            if parts:
                dealer_block = "<b>üìç –î–∏–ª–µ—Ä:</b>\n" + "\n".join(parts)

    lines = [
        "üîÑ <b>–î–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞</b>",
        "",
        f"üöó <b>{order.get('brand','')} {order.get('model','')}</b>",
    ]
    if dealer_block:
        lines.append(dealer_block)
    lines.extend(["", "<b>–ó–∞–¥–∞–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>", task_text])
    text = "\n".join(lines)

    await message.bot.send_message(
        photographer_id,
        text,
        reply_markup=rework_kb,
        parse_mode="HTML",
    )
    await message.answer(
        "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Å–º–æ—Ç—Ä—â–∏–∫—É –∏ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ –¥–æ—Ä–∞–±–æ—Ç–∫—É."
    )
    await state.clear()


@router.callback_query(F.data.startswith("finish_additional_"))
async def finish_additional_task(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data[len("finish_additional_") :]
    user_id = callback.from_user.id

    await send_files_to_admin(order_id, user_id, callback.bot, is_rework=True)
    update_order_status(order_id, "review")

    await callback.answer(
        "–î–æ–ø. –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É.", show_alert=True
    )
    await callback.message.edit_text("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@router.callback_query(F.data.startswith("admin_confirm_"))
async def admin_confirm_order(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer(
            "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∑–∞–∫–∞–∑—ã!", show_alert=True
        )
        return

    order_id = callback.data[14:]
    order = get_order_by_id(order_id)
    manager_id = order.get("manager_id") if order else None

    update_order_status(order_id, "done")

    await callback.answer(
        "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω'.", show_alert=True
    )
    await callback.message.edit_text(
        "‚úÖ <b>–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –∑–∞–≤–µ—Ä—à—ë–Ω.</b>", parse_mode="HTML"
    )

    if manager_id:
        try:
            car = f"{(order or {}).get('brand','')} {(order or {}).get('model','')}".strip()
            text = (
                "‚úÖ <b>–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n"
                f"üöó <b>{car}</b>\n"
                f"üÜî –ó–∞–∫–∞–∑: {order_id}\n\n"
                "–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!"
            )
            await callback.bot.send_message(manager_id, text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")


@router.callback_query(F.data.startswith("admin_rework_"))
async def admin_rework_order(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer(
            "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É!",
            show_alert=True,
        )
        return

    order_id = callback.data[13:]
    order = get_order_by_id(order_id)

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    update_order_status(order_id, "progress")

    photographer_id = order.get("manager_id")
    if photographer_id:
        try:
            rework_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üì∑ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ",
                            callback_data=f"continue_order_{order_id}",
                        )
                    ]
                ]
            )

            await callback.bot.send_message(
                photographer_id,
                f"üîÑ <b>–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É</b>\n\n"
                f"üöó <b>{order.get('brand', '')} {order.get('model', '')}</b>\n"
                f"üìã {order.get('title', '')}\n\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞. "
                f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –≤–∏–¥–µ–æ.",
                reply_markup=rework_kb,
                parse_mode="HTML",
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞: {e}")
            await callback.answer(
                "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞.",
                show_alert=True,
            )
            return

    await callback.answer("üîÑ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É!", show_alert=True)
    await callback.message.edit_text(
        "üîÑ <b>–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.</b>\n\n–§–æ—Ç–æ–≥—Ä–∞—Ñ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
        parse_mode="HTML",
    )
