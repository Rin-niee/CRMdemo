from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from handlers.admin.notifications import send_files_to_admin
from handlers.common.constans import PHOTO_STAGES
from handlers.orderss.states import OrderStates
from utils.file_handler import (
    get_user_files,
    get_files_by_stage_summary,
)
from keyboards.inline import (
    get_main_menu_keyboard,
)
from utils.data import (
    update_order_status,
    get_order_by_id,
    get_dealer_by_id,
)

router = Router()


@router.callback_query(F.data.startswith("continue_order_"))
async def continue_order(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data[15:]
    order = get_order_by_id(int(order_id))

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    if order.get("manager_id") != callback.from_user.id:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º!", show_alert=True)
        return

    if order.get("status") not in ["progress", "review"]:
        await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏!", show_alert=True)
        return

    await state.update_data(selected_order=order_id, context="rework")

    await state.set_state(OrderStates.photo_additional)

    user_id = callback.from_user.id
    stages_summary = get_files_by_stage_summary(user_id, order_id)

    summary_lines = [
        f"‚Ä¢ {stage}: {count} —Ñ–∞–π–ª(–æ–≤)"
        for stage, count in stages_summary.items()
        if count > 0
    ]
    summary_text = "\n".join(summary_lines)

    dealer_text = ""
    dealer_id = order.get("dealers_id")
    if dealer_id:
        dealer = get_dealer_by_id(dealer_id)
        if dealer:
            parts = []
            if dealer.get("name"):
                parts.append(dealer["name"])
            if dealer.get("phone"):
                parts.append(str(dealer["phone"]))
            if dealer.get("address"):
                parts.append(dealer["address"])
            if parts:
                dealer_text = "\n<b>üìç –î–∏–ª–µ—Ä:</b>\n" + "\n".join(parts) + "\n"

    parts = [
        "üîÑ <b>–î–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞</b>",
        "",
        f"üöó <b>{order.get('brand', '')} {order.get('model', '')}</b>",
    ]
    if order.get("title"):
        parts.append(f"üìã {order.get('title', '')}")
    if dealer_text:
        parts.append(dealer_text.strip())
    if summary_text:
        parts.extend(["", "üìÇ <b>–¢–µ–∫—É—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>", summary_text])
    parts.extend(
        [
            "",
            "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>",
            "üìù –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫—É':",
        ]
    )
    text = "\n".join(parts)

    await callback.message.answer(
        text,
        reply_markup=get_rework_keyboard(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "finish_rework")
async def finish_rework(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_order = data.get("selected_order")
    user_id = callback.from_user.id

    if not selected_order:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏!", show_alert=True)
        return

    files = get_user_files(user_id, selected_order)

    await callback.message.answer(
        f"‚úÖ <b>–î–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {len(files)}\n"
        f"üöó –ó–∞–∫–∞–∑: {selected_order}\n\n"
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML",
    )

    await send_files_to_admin(selected_order, user_id, callback.bot, is_rework=True)

    update_order_status(str(selected_order), "review")

    await state.clear()


def get_rework_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data="finish_rework"
                )
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
    )
