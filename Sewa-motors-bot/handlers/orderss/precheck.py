from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import asyncio
import config
from utils.data import (
    get_order_by_id, 
    get_manager_group,
    get_thread_information,
    get_all_users,
    )
from handlers.orderss.states import OrderStates
from keyboards.inline import (
    get_precheck_manager_keyboard,
    get_precheck_after_video_keyboard,
    get_precheck_manager_reply_keyboard,
)
router = Router()

_pending_customer_wait: dict[str, asyncio.Task] = {}
_active_chats: dict[str, int] = {}
_chat_manager_to_order: dict[int, str] = {}
_require_video_for_order: dict[str, bool] = {}


async def _send_manager_start_button(bot, manager_id: int, order_id: str):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üì∏ –ù–∞—á–∞—Ç—å —Å—ä—ë–º–∫—É", callback_data=f"start_photo_session_now:{order_id}")]]
    )
    await bot.send_message(manager_id, "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Å–º–æ—Ç—Ä.", reply_markup=kb)


async def _send_group_continue_button(bot, chat_id: int, order_id: str, thread_id: int | None = None):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–º–æ—Ç—Ä", callback_data=f"start_photo_session_now:{order_id}")]]
    )
    send_kwargs = {
        "chat_id": chat_id,
        "text": "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Å–º–æ—Ç—Ä",
        "reply_markup": kb,
    }
    if thread_id is not None:  # –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        send_kwargs["message_thread_id"] = thread_id

    await bot.send_message(**send_kwargs)


@router.callback_query(F.data == "precheck_start")
async def precheck_start(callback: CallbackQuery, state: FSMContext):
    from handlers.orderss.photo_session import start_photo_session
    await start_photo_session(callback, state)


@router.callback_query(F.data == "precheck_need_consult")
async def precheck_need_consult(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderStates.precheck_wait_manager)
    await callback.message.answer("üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await callback.answer()


@router.message(OrderStates.precheck_wait_manager)
async def precheck_send_to_manager(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = str(data.get("selected_order"))
    order = get_order_by_id(int(order_id))
    if not order:
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    if order.get('status') == 'disabled':
        await message.answer("‚õîÔ∏è –ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await state.clear()
        return
    admin_id = config.get_admin_id()
    if not admin_id:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
        await state.clear()
        return

    header = (
        "üõë <b>–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n\n"
        f"üöó <b>{order.get('brand','')} {order.get('model','')}</b>\n"
        f"üÜî –ó–∞–∫–∞–∑: {order.get('id')}\n"
    )

    if message.text:
        consult_text = header + f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{message.text}"
        await message.bot.send_message(
            admin_id,
            consult_text,
            parse_mode="HTML",
            reply_markup=get_precheck_manager_keyboard(order_id),
        )
    elif message.voice:
        await message.bot.send_message(admin_id, header, parse_mode="HTML")
        await message.bot.send_voice(
            admin_id,
            message.voice.file_id,
            caption="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            reply_markup=get_precheck_manager_keyboard(order_id),
        )
    elif message.video_note:
        await message.bot.send_message(admin_id, header, parse_mode="HTML")
        await message.bot.send_video_note(
            admin_id,
            message.video_note.file_id,
        )
        await message.bot.send_message(
            admin_id,
            "üìé –ö—Ä—É–∂–æ–∫",
            reply_markup=get_precheck_manager_keyboard(order_id),
        )
    else:
        await message.answer("‚ö†Ô∏è –ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∫—Ä—É–∂–æ–∫.")
        return

    await message.answer("–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ.")
    await state.clear()



_pending_video_messages = {}

# --- –ó–ê–ü–†–û–° –í–ò–î–ï–û –£ –û–°–ú–û–¢–†–©–ò–ö–ê ---
@router.callback_query(F.data.startswith("precheck_req_video_"))
async def precheck_request_video(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data[len("precheck_req_video_"):]
    order = get_order_by_id(int(order_id))
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await callback.answer("–ó–∞–ø—Ä–æ—Å–∏–ª —É –æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ.", show_alert=True)
    await callback.message.edit_reply_markup(reply_markup=get_precheck_after_video_keyboard(order_id))
    _require_video_for_order[order_id] = True

    manager = order.get("manager_id")
    if not manager:
        return

    group_user = get_all_users(manager)
    group = get_manager_group(group_user)
    if not group:
        return

    thread_id = get_thread_information(group)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞",
            callback_data=f"send_video_{order_id}"
        )]
    ])

    try:
        if thread_id:
            sent_msg = await callback.bot.send_message(
                group,
                "üìπ –°–Ω–∏–º–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏–¥–µ–æ-–æ–±–∑–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=kb,
                message_thread_id=thread_id
            )
        else:
            sent_msg = await callback.bot.send_message(
                group,
                "üìπ –°–Ω–∏–º–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏–¥–µ–æ-–æ–±–∑–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=kb
            )
        _pending_video_messages[order_id] = sent_msg.message_id
        print(f"[INFO] –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group} —Å message_id={sent_msg.message_id}")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ precheck_request_video: {e}")
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# --- –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–ò–°–õ–ê–ù–ù–û–ì–û –í–ò–î–ï–û ---
@router.message(OrderStates.precheck_wait_video, F.video)
async def precheck_video_to_manager(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = str(data.get("selected_order"))

    if not order_id:
        await message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    order = get_order_by_id(int(order_id))
    if not order:
        await message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    admin_id = config.get_admin_id()
    if not admin_id:
        await message.answer("–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
        return

    caption = (
        f"üìπ –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ\n\n"
        f"üöó {order.get('brand','')} {order.get('model','')}\n"
        f"üÜî –ó–∞–∫–∞–∑: {order.get('id')}"
    )

    try:
        kb = get_precheck_after_video_keyboard(order_id)
        await message.bot.send_video(
            chat_id=admin_id,
            video=message.video.file_id,
            caption=caption,
            reply_markup=kb
        )
        await message.answer("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ.")

        # —É–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
        _pending_video_messages.pop(order_id, None)

    except Exception as e:
        print(f"[ERROR] Failed to send video for order {order_id} to admin {admin_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        print(f"Failed to send message to group {e}")

@router.callback_query(F.data.startswith("send_video_"))
async def send_video_callback(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data[len("send_video_"):]
    order = get_order_by_id(int(order_id))
    manager_id = order.get("manager_id") if order else None
    if callback.from_user.id != manager_id:
        await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å.", show_alert=True)
        return

    await state.set_state(OrderStates.precheck_wait_video)
    await state.update_data(selected_order=order_id)
    await callback.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ. –û–Ω–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    print(f"Failed to send message to group {e}")

# @router.message(OrderStates.precheck_wait_manager, F.video)
# async def precheck_video_to_manager(message: Message, state: FSMContext):
#     data = await state.get_data()
#     order_id = str(data.get("selected_order"))
#     admin_id = config.get_admin_id()
#     order = get_order_by_id(int(order_id)) if order_id else None
#     if not admin_id or not order:
#         return
#     caption = (
#         f"üìπ –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ\n\n"
#         f"üöó {order.get('brand','')} {order.get('model','')}\n"
#         f"üÜî –ó–∞–∫–∞–∑: {order.get('id')}"
#     )
#     try:
#         await message.bot.send_video(
#             admin_id,
#             message.video.file_id,
#             caption=caption,
#             reply_markup=get_precheck_after_video_keyboard(order_id),
#         )
#         await message.answer("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ.")
#         _require_video_for_order.pop(order_id, None)
#     except Exception:
#         pass

# #–ó–ê–ü–†–û–° –í–ò–î–ï–û –£ –û–°–ú–û–¢–†–©–ò–ö–ê
# @router.callback_query(F.data.startswith("precheck_req_video_"))
# async def precheck_request_video(callback: CallbackQuery, state: FSMContext):
#     order_id = callback.data[len("precheck_req_video_"):]
#     order = get_order_by_id(int(order_id))
#     await callback.answer("–ó–∞–ø—Ä–æ—Å–∏–ª —É –æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ.", show_alert=True)
#     await callback.message.edit_reply_markup(reply_markup=get_precheck_after_video_keyboard(order_id))
#     _require_video_for_order[order_id] = True
#     manager = order.get("manager_id")
#     if not manager:
#         return

#     group_user = get_all_users(manager)
#     group = get_manager_group(group_user)
#     if not group:
#         return

#     thread_id = get_thread_information(group)

#     try:
#         if thread_id:
#             await callback.bot.send_message(
#                 group,
#                 "üìπ –°–Ω–∏–º–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏–¥–µ–æ-–æ–±–∑–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
#                 message_thread_id=thread_id,
#             )
#         else:
#             await callback.bot.send_message(
#                 group,
#                 "üìπ –°–Ω–∏–º–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏–¥–µ–æ-–æ–±–∑–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
#             )
#     except Exception as e:
#         print(f"Failed to send message to group {group}: {e}")
        
#–ü–†–û–î–û–õ–ñ–ò–¢–¨ –û–°–ú–û–¢–†
@router.callback_query(F.data.startswith("precheck_continue_"))
async def precheck_continue(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data[len("precheck_continue_"):]
    order = get_order_by_id(int(order_id))
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    manager = order.get("manager_id")
    if not manager:
        await callback.answer("–û—Å–º–æ—Ç—Ä—â–∏–∫ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.", show_alert=True)
        return
    group_user = get_all_users(manager)
    group = get_manager_group(group_user)
    thread_id = get_thread_information(group) if group else None
    _active_chats.pop(str(order_id), None)
    _chat_manager_to_order.pop(manager, None)
    _require_video_for_order.pop(str(order_id), None)
    task = _pending_customer_wait.pop(str(order_id), None)
    if task:
        task.cancel()
    # await _send_manager_start_button(callback.bot, manager, str(order_id))
    if group:
        try:
            if thread_id:
                await _send_group_continue_button(callback.bot, group, str(order_id), thread_id)
            else:
                await _send_group_continue_button(callback.bot, group, str(order_id), thread_id)
            await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.", show_alert=True)
        except Exception as e:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.", show_alert=True)
            print(f"Failed to send message to group {group}: {e}")
    else:
        await callback.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Å–º–æ—Ç—Ä", show_alert=True)
     

@router.callback_query(F.data.startswith("start_photo_session_now:"))
async def start_session_now(callback: CallbackQuery, state: FSMContext):

    order_id = callback.data.split(":", 1)[1]
    try:
        from utils.data import update_order_status, assign_manager_to_order
        update_order_status(str(order_id), "progress")
        assign_manager_to_order(str(order_id), callback.from_user.id)
        _active_chats.pop(str(order_id), None)
        _chat_manager_to_order.pop(callback.from_user.id, None)
        _require_video_for_order.pop(str(order_id), None)
    except Exception:
        pass

    await state.update_data(selected_order=str(order_id))
    from handlers.orderss.photo_session import start_photo_session
    await start_photo_session(callback, state)


@router.callback_query(F.data.startswith("manager_reply_"))
async def manager_reply_start(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data[len("manager_reply_"):]
    await state.set_state(OrderStates.precheck_chat_manager)
    await state.update_data(chat_order_id=order_id)

    _chat_manager_to_order[callback.from_user.id] = order_id
    await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await callback.answer()


@router.callback_query(F.data.startswith("precheck_chat_"))
async def precheck_chat_start(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data[len("precheck_chat_"):]
    order = get_order_by_id(int(order_id))
    if not order or not order.get("manager_id"):
        await callback.answer("–û—Å–º–æ—Ç—Ä—â–∏–∫ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.", show_alert=True)
        return

    _active_chats[order_id] = order["manager_id"]
    _chat_manager_to_order[order["manager_id"]] = order_id
    await state.set_state(OrderStates.precheck_chat)
    await state.update_data(chat_order_id=order_id)
    await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–º–æ—Ç—Ä—â–∏–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
    await callback.answer()


@router.message(OrderStates.precheck_chat, F.text & ~F.text.startswith('/'))
async def precheck_chat_bridge(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("chat_order_id")
    if not order_id:
        return
    order = get_order_by_id(int(order_id))
    manager_id = order.get("manager_id") if order else None
    if not manager_id:
        await message.answer("–û—Å–º–æ—Ç—Ä—â–∏–∫ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
        await state.clear()
        return

    if order and order.get('status') == 'disabled':
        _active_chats.pop(str(order_id), None)
        if manager_id in _chat_manager_to_order:
            _chat_manager_to_order.pop(manager_id, None)
        await state.clear()
        return
    manager = order.get("manager_id")
    if not manager:
        await callback.answer("–û—Å–º–æ—Ç—Ä—â–∏–∫ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.", show_alert=True)
        return
    group_user = get_all_users(manager)
    group = get_manager_group(group_user)
    thread_id = get_thread_information(group) if group else None
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–º–æ—Ç—Ä", callback_data=f"start_photo_session_now:{order_id}")]]
    )
    if group:
        try:
            if thread_id:
                hint = "\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
                await message.bot.send_message(
                    group,
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}",#{hint}
                    reply_markup=kb, message_thread_id=thread_id,
                )
            else:
                hint = "\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
                await message.bot.send_message(
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}",#{hint}
                    reply_markup=kb,
                )
        except Exception as e:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.", show_alert=True)
            print(f"Failed to send message to group {group}: {e}")
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Å–º–æ—Ç—Ä—â–∏–∫—É.")


@router.message(OrderStates.precheck_chat_manager, F.text & ~F.text.startswith('/'))
async def precheck_chat_reply(message: Message, state: FSMContext):
    admin_id = config.get_admin_id()
    if not admin_id:
        return
    if not message.text or not message.text.strip():
        return
    try:
        data = await state.get_data()
        order_id = data.get("chat_order_id") or _chat_manager_to_order.get(message.from_user.id)
        if not order_id:
            await message.bot.send_message(admin_id, f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –æ—Å–º–æ—Ç—Ä—â–∏–∫–∞:\n{message.text}")
            return

        order = get_order_by_id(int(order_id))
        if order and order.get('status') == 'disabled':
            _active_chats.pop(str(order_id), None)
            _chat_manager_to_order.pop(message.from_user.id, None)
            await state.clear()
            return
        await message.bot.send_message(
            admin_id,
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Å–º–æ—Ç—Ä—â–∏–∫–∞:\n{message.text}",
            reply_markup=get_precheck_after_video_keyboard(order_id),
        )

        await state.clear()
    except Exception:
        pass


@router.callback_query(F.data.startswith("precheck_stop_"))
async def precheck_stop(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data[len("precheck_stop_"):]
    from utils.data import update_order_status
    update_order_status(str(order_id), "disabled")
    order = get_order_by_id(int(order_id))
    if order and order.get("manager_id"):
        await callback.bot.send_message(order["manager_id"], "‚õîÔ∏è –û—Å–º–æ—Ç—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç.")
        _active_chats.pop(str(order_id), None)
        _chat_manager_to_order.pop(order["manager_id"], None)
        _require_video_for_order.pop(str(order_id), None)
    await state.clear()

    try:
        if getattr(callback.message, "text", None):
            await callback.message.edit_text("‚õîÔ∏è –û—Å–º–æ—Ç—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ disabled.")
        else:
            await callback.message.answer("‚õîÔ∏è –û—Å–º–æ—Ç—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ disabled.")
    except Exception:
        try:
            await callback.message.answer("‚õîÔ∏è –û—Å–º–æ—Ç—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ disabled.")
        except Exception:
            pass
    await callback.answer()


@router.callback_query(F.data.startswith("precheck_wait_customer_"))
async def precheck_wait_customer(callback: CallbackQuery, state: FSMContext):
    await callback.answer()


@router.callback_query(F.data.startswith("cust_no_answer_"))
async def cust_no_answer(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data[len("cust_no_answer_"):]
    task = _pending_customer_wait.pop(str(order_id), None)
    if task:
        task.cancel()
    order = get_order_by_id(int(order_id))
    if order and order.get("manager_id"):
        await _send_manager_start_button(callback.bot, order["manager_id"], str(order.get("id")))
    await callback.answer("–ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Å–º–æ—Ç—Ä.", show_alert=True)


@router.callback_query(F.data.startswith("cust_stop_"))
async def cust_stop(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data[len("cust_stop_"):]
    task = _pending_customer_wait.pop(str(order_id), None)
    if task:
        task.cancel()
    order = get_order_by_id(int(order_id))
    if order and order.get("manager_id"):
        await callback.bot.send_message(order["manager_id"], "‚õîÔ∏è –û—Å–º–æ—Ç—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ä–µ—à–µ–Ω–∏—é –∑–∞–∫–∞–∑—á–∏–∫–∞.")
    await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Å–º–æ—Ç—Ä—â–∏–∫—É.", show_alert=True)


@router.callback_query(F.data.startswith("cust_continue_"))
async def cust_continue(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data[len("cust_continue_"):]
    await state.set_state(OrderStates.precheck_video)
    await state.update_data(precheck_order_id=order_id)
    await callback.message.edit_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await callback.answer()


@router.message(OrderStates.precheck_video)
async def cust_comment_input(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("precheck_order_id")
    order = get_order_by_id(int(order_id)) if order_id else None
    if order and order.get("manager_id"):
        await message.bot.send_message(order["manager_id"], f"‚úÖ –†–µ—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞: {message.text}\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Å–º–æ—Ç—Ä.")
        await _send_manager_start_button(message.bot, order["manager_id"], str(order_id))
    task = _pending_customer_wait.pop(str(order_id), None)
    if task:
        task.cancel()
    await state.clear()

