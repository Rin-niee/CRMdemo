from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from typing import Dict
from handlers.orderss.states import OrderStates
import logging
from handlers.common.utils import safe_edit_message, build_order_info_text
from keyboards.inline import (
    get_companies_keyboard,
    get_orders_keyboard,
    get_main_menu_keyboard,
    get_precheck_decision_keyboard,
    get_orders_with_opened_keyboard_for_decline,
    get_orders_with_opened_keyboard,
)
from utils.data import (
    get_order_by_id,
    get_available_orders_by_company, 
    get_all_orders_for_me,
    get_open_orders_with_opened_at, 
    clear_manager_for_order,
    update_order_status,
    assign_manager_to_order
)
from handlers.admin.notifications import notify_admin_manager_decline, notify_manager_arrived


router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "orderplan_menu")
async def order_plan_menu(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–µ–¥–∞–≤–Ω–æ,
    –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –¥–µ–Ω—å.
    """
    orders = await get_open_orders_with_opened_at()
    if not orders:
        await callback.message.edit_text("–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        await callback.answer()
        return

    await callback.message.edit_text(
        "üïì –ù–µ–¥–∞–≤–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã:",
        reply_markup=get_orders_with_opened_keyboard(orders),
    )
    await callback.answer()



@router.callback_query(F.data == "all_my_orders")
async def declare_menu(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è.
    """
    user_id = callback.from_user.id

    orders = await get_all_orders_for_me(user_id)
    if not orders:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        await callback.answer()
        return

    await callback.message.edit_text(
        "üôÖ‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, –æ—Ç –∫–∞–∫–æ–≥–æ –∏–∑ –∑–∞–∫–∞–∑–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è:",
        reply_markup=get_orders_with_opened_keyboard_for_decline(orders),
    )
    await callback.answer()



@router.callback_query(F.data.startswith("order_opened_"))
async def show_opened_order(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ–º –∑–∞–∫–∞–∑–µ
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å —Å ID –∑–∞–∫–∞–∑–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    """
    order_id = int(callback.data[len("order_opened_") :])
    order = await get_order_by_id(order_id)

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    await state.update_data(context="opened", selected_order=order_id)
    await show_order_info(callback, order, state)
    await callback.answer()


@router.callback_query(F.data == "select_order")
async def select_company_menu(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
    
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ FSM.
    """
    await state.set_state(OrderStates.selecting_company)
    await safe_edit_message(
        callback, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=await get_companies_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("company_"))
async def company_selected_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å —Å ID –∫–æ–º–ø–∞–Ω–∏–∏
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    """
    company_id = int(callback.data[8:])
    await state.update_data(selected_company=company_id)
    await state.set_state(OrderStates.selecting_order)

    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    orders = await get_available_orders_by_company(company_id, user_id)
    if not orders:
        await safe_edit_message(
            callback, "–£ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", get_main_menu_keyboard()
        )
        await callback.answer()
        return

    await safe_edit_message(
        callback,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_orders_keyboard(orders, back_button=True),
    )
    await callback.answer()


@router.callback_query(lambda c: c.data.isdigit())
async def order_selected_from_company(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
    –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å —Å ID –∑–∞–∫–∞–∑–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    """
    order_id = int(callback.data)

    logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ —Å ID: '{order_id}'")

    order = await get_order_by_id(order_id)
    if not order:
        logger.error(f"–ó–∞–∫–∞–∑ —Å ID '{order_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_order=order_id)
    await show_order_info(callback, order, state)


async def show_order_info(callback: CallbackQuery, order: Dict, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º.
    –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        order: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """
    info_text, photo = await build_order_info_text(order)

    state_data = await state.get_data()
    context = state_data.get("context")
    from_status_menu = context == "status"
    from_notification = context == "notification"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–∏—à–ª–∏ –ª–∏ –º—ã –∏–∑ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–æ–≤
    if not from_status_menu:
        from_status_menu = bool(
            callback.message.reply_markup
            and any(
                (btn.callback_data and "status" in btn.callback_data)
                for row in callback.message.reply_markup.inline_keyboard
                for btn in row
            )
        )
    
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    if order.get("status") != "done":
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úÖ–ü—Ä–∏–±—ã–ª –Ω–∞ –º–µ—Å—Ç–æ", callback_data="start_photo_session"
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
    if from_notification:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é", callback_data="back_to_notification"
                )
            ]
        )
    else:
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∑–∞–∫–∞–∑–∞–º
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º",
                    callback_data="back_to_status_filter"
                    if from_status_menu
                    else "back_to_orders",
                )
            ]
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    if photo:
        await callback.message.answer_photo(photo=photo, caption=info_text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await callback.message.answer(info_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "start_photo_session")
async def precheck_entry(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑ –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç
    –º–µ–Ω—é –≤—ã–±–æ—Ä–∞: –Ω–∞—á–∞—Ç—å –æ—Å–º–æ—Ç—Ä —Å—Ä–∞–∑—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
    """
    data = await state.get_data()
    if not data.get("selected_order"):
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        return

    try:
        order_id = str(data.get("selected_order"))
        order = await get_order_by_id(int(order_id))
        order_id2 = order.get("id")
        manager_id = order.get("manager_id")
        bot = callback.bot
        if manager_id:
            await notify_manager_arrived(bot, order_id2, manager_id)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "progress" –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await update_order_status(order_id, "progress")
        await assign_manager_to_order(order_id, callback.from_user.id)
    except Exception:
        pass
    
    # –í—ã–±–æ—Ä —Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    await state.set_state(OrderStates.precheck_decision)
    await callback.message.answer(
        "üëÄ –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∞–≤—Ç–æ: –Ω–∞—á–Ω–∏—Ç–µ –æ—Å–º–æ—Ç—Ä —Å—Ä–∞–∑—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
        reply_markup=get_precheck_decision_keyboard(),
    )
    await callback.answer()

@router.callback_query(F.data.startswith("decline_order_"))
async def decline_order_start(callback: CallbackQuery):
    order_id = int(callback.data[len("decline_order_") :])

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è",
                    callback_data=f"confirm_decline_{order_id}",
                ),
                InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å",
                    callback_data=f"cancel_decline_{order_id}",
                ),
            ]
        ]
    )

    await callback.message.edit_text(
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞ #{order_id}?",
        reply_markup=keyboard,
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_decline_"))
async def decline_order_confirm(callback: CallbackQuery):
    order_id = callback.data[len("confirm_decline_") :]

    order = await get_order_by_id(int(order_id))
    if not order:
        await callback.message.edit_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    if order.get("manager_id") != callback.from_user.id:
        await callback.message.edit_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        await callback.answer()
        return

    await clear_manager_for_order(int(order_id))
    await update_order_status(int(order_id), "open")

    try:
        await notify_admin_manager_decline(
            callback.bot, order, callback.from_user.id, reason=None
        )
    except Exception:
        pass

    await callback.message.edit_text(
        f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞ #{order_id}. –û–Ω —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∑—è—Ç–∏—è."
    )
    await callback.answer()


#–æ—Ç–º–µ–Ω–∞
@router.callback_query(F.data.startswith("cancel_decline_"))
async def decline_order_cancel(callback: CallbackQuery):
    order_id = callback.data[len("cancel_decline_") :]

    await callback.message.edit_text(
        f"–û—Ç–∫–∞–∑ –æ—Ç –∑–∞–∫–∞–∑–∞ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω."
    )
    await callback.answer()
