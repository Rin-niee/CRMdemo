from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from handlers.common.constans import PHOTO_STAGES, TOTAL_STAGES
from handlers.common.utils import (
    build_stage_message,
    get_next_stage,
    get_stage_by_state,
)
from handlers.admin.notifications import send_files_to_admin
from utils.file_handler import get_stage_files, get_user_files
from keyboards.inline import (
    get_photo_stage_keyboard,
    get_main_menu_keyboard,
    get_checklist_question_keyboard,
)

from utils.data import update_order_status, assign_manager_to_order, get_order_by_id
from handlers.admin.notifications import notify_admin_manager_assignment
from typing import List
import asyncio
from handlers.orderss.states import OrderStates
from handlers.orderss.rework import finish_rework
from keyboards.inline import get_checklist_multichoice_keyboard

router = Router()


@router.callback_query(F.data == "start_photo_session")
async def start_photo_session(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞, –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞,
    —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∏.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
    """
    data = await state.get_data()
    selected_order = data.get("selected_order")

    if not selected_order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        return

    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order = get_order_by_id(int(selected_order))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
    if order and order.get("status") == "done":
        await callback.answer(
            "–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è—Ç –ª–∏ –∑–∞–∫–∞–∑ –¥—Ä—É–≥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if order and order.get("manager_id") and order.get("manager_id") != user_id:
        await callback.answer(
            "–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ —É –¥—Ä—É–≥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.", show_alert=True
        )
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if order and not order.get("manager_id"):
        try:
            await notify_admin_manager_assignment(callback.bot, order, user_id)
        except Exception:
            pass
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    asyncio.create_task(update_order_async(selected_order, user_id))

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏
    first_stage = PHOTO_STAGES[0]
    await state.set_state(first_stage["state"])
    await state.update_data(selected_order=selected_order)

    stage_info = {**first_stage, "total_stages": TOTAL_STAGES}

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞
    markup = get_photo_stage_keyboard(stage_info)
    try:
        selected_order_id = selected_order
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–∞–∑–∞ –æ—Ç –∑–∞–∫–∞–∑–∞
        markup.inline_keyboard.append(
            [
                InlineKeyboardButton(
                    text="üôÖ‚Äç‚ôÇÔ∏è –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞",
                    callback_data=f"decline_order_{selected_order_id}",
                )
            ]
        )

    except Exception:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º —ç—Ç–∞–ø–æ–º
    await callback.message.answer(
        text=build_stage_message(first_stage),
        reply_markup=markup,
        parse_mode="HTML",
    )
    await callback.answer("–°—Ç–∞—Ä—Ç!")


async def update_order_async(selected_order, user_id):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    
    Args:
        selected_order: ID –∑–∞–∫–∞–∑–∞
        user_id: ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    """
    try:
        order_id_str = str(selected_order)
        update_order_status(order_id_str, "progress")
        assign_manager_to_order(order_id_str, user_id)
    except Exception:
        pass


@router.callback_query(F.data == "next_stage")
async def next_stage(callback: CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ,
    –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é.
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    """
    current_state = await state.get_state()
    current_stage = get_stage_by_state(current_state)

    # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é
    if current_state == OrderStates.photo_additional.state:
        await finish_rework(callback, state)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö
    if current_stage and current_stage["required"]:
        data = await state.get_data()
        selected_order = data.get("selected_order")

        if not selected_order:
            await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
        files = get_stage_files(
            callback.from_user.id, selected_order, current_stage["title"]
        )
        if not files:
            await callback.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª!", show_alert=True)
            return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ
    next_stage_info = get_next_stage(current_state)
    if not next_stage_info:
        # –ï—Å–ª–∏ —ç—Ç–∞–ø–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é
        asyncio.create_task(finish_photo_session_async(callback, state))
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    await state.set_state(next_stage_info["state"])
    stage_info = {**next_stage_info, "total_stages": TOTAL_STAGES}

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
    markup = get_photo_stage_keyboard(stage_info)
    try:
        data = await state.get_data()
        selected_order_id = data.get("selected_order")
        if selected_order_id:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–∞–∑–∞ –æ—Ç –∑–∞–∫–∞–∑–∞
            markup.inline_keyboard.append(
                [
                    InlineKeyboardButton(
                        text="üôÖ‚Äç‚ôÇÔ∏è –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞",
                        callback_data=f"decline_order_{selected_order_id}",
                    )
                ]
            )

    except Exception:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —ç—Ç–∞–ø–æ–º
    await callback.message.edit_text(
        text=build_stage_message(next_stage_info),
        reply_markup=markup,
        parse_mode="HTML",
    )
    await callback.answer("–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø!")


async def finish_photo_session_async(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_order = data.get("selected_order")
    user_id = callback.from_user.id

    current_state = await state.get_state()
    if current_state == OrderStates.photo_additional.state:
        await finish_rework(callback, state)
        return

    if not selected_order:
        await callback.message.answer(
            "–§–æ—Ç–æ—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        await callback.answer("–ì–æ—Ç–æ–≤–æ!")
        return

    missing_stages = []
    for stage in PHOTO_STAGES:
        if stage["required"]:
            files = get_stage_files(user_id, selected_order, stage["title"])
            if not files:
                missing_stages.append(
                    stage["title"].replace("üì∏ ", "").replace("üé• ", "")
                )

    if missing_stages:
        await callback.answer(
            f"–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {', '.join(missing_stages)}", show_alert=True
        )
        return

    await state.set_state(OrderStates.checklist_q1)
    await callback.message.answer(
        "‚úÖ –§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã.\n\n–í–æ–ø—Ä–æ—Å 1: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–º–ø–µ—Ä–∞?",
        reply_markup=get_checklist_multichoice_keyboard(
            1, [("–û—Ç–ª–∏—á–Ω–æ", "–æ—Ç–ª–∏—á–Ω–æ"), ("–•–æ—Ä–æ—à–æ", "—Ö–æ—Ä–æ—à–æ"), ("–ü–ª–æ—Ö–æ", "–ø–ª–æ—Ö–æ")]
        ),
    )
    await callback.answer()


async def send_to_admin_async(selected_order, user_id, bot):
    try:
        await send_files_to_admin(selected_order, user_id, bot, is_rework=False)
        update_order_status(str(selected_order), "review")
    except Exception:
        pass
