from datetime import datetime, timedelta
from aiogram.types import FSInputFile, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaVideo
import os
import logging
import config
from handlers.common.constans import MAX_FILES_TO_SEND
from utils.data import(
    get_all_orders_by_status,
    get_checklist_answers,
    mark_order_as_shown,
    get_order_by_id,
    get_progress_manager_ids,
    get_open_orders_older_than,
    get_dealer_by_id,
    get_company_by_id,
    get_thread_clients,
    get_open_orders_with_opened_at,
 )
from utils.file_handler import (
    get_user_files,
    get_files_by_stage_summary,
)
import traceback
from keyboards.inline import (
    get_orders_with_opened_keyboard,
    get_admin_order_keyboard,
)
from crm_integration import push_notification_to_redis

import asyncio

logger = logging.getLogger(__name__)


async def notify_admin_manager_assignment(bot, order, manager_id: int):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ç–æ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        order: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        manager_id: ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∑—è–ª –∑–∞–∫–∞–∑
    """
    admin_id = await config.get_admin_id()
    if not admin_id:
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(
        admin_id,
        (
            "üìå <b>–ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
            f"üöó <b>{order.get('brand','')} {order.get('model','')}</b>\n"
            f"üÜî –ó–∞–∫–∞–∑: {order.get('id')}\n"
            f"üë§ –û—Å–º–æ—Ç—Ä—â–∏–∫: {manager_id}"
        ),
        parse_mode="HTML",
    )


async def notify_managers_order_opened(bot, order):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–æ–º –∑–∞–∫–∞–∑–µ
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    —Å –∫–Ω–æ–ø–∫–æ–π "–í–∑—è—Ç—å –∑–∞–∫–∞–∑". –ò—Å–∫–ª—é—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏
    –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        order: –î–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    """
    try:
        admin_id = await config.get_admin_id()
        allowed_users = await config.get_allowed_users() or []

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        allowed_users = [
            uid for uid in allowed_users if isinstance(uid, int) and uid > 100000
        ]

        # –ü–æ–ª—É—á–∞–µ–º ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ
        active_progress_ids = set(await get_progress_manager_ids())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–ª–µ—Ä–µ
        dealer_text = ""
        dealer_id = order.get("dealers_id")

        if dealer_id:
            dealer = await get_dealer_by_id(dealer_id)
            if dealer:
                parts = []
                if dealer.get("name"):
                    parts.append(dealer["name"])
                if dealer.get("phone"):
                    parts.append(str(dealer["phone"]))
                if dealer.get("address"):
                    parts.append(dealer["address"])
                if parts:
                    dealer_text = "\n<b>üìç –î–∏–ª–µ—Ä:</b>\n" + "\n".join(parts)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        text = (
            "üîî <b>–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            f"üöó <b>{order.get('brand','')} {order.get('model','')}</b>\n"
            f"üÜî –ó–∞–∫–∞–∑: {order.get('id')}" + dealer_text + "\n\n"
            "–ú–æ–∂–Ω–æ –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–∑—è—Ç—å –∑–∞–∫–∞–∑"
        open_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì• –í–∑—è—Ç—å –∑–∞–∫–∞–∑",
                        callback_data=f"order_status_{order.get('id')}",
                    )
                ]
            ]
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user_id in allowed_users:
            if not user_id:
                continue
            if user_id == admin_id:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id in active_progress_ids:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏ –≤ —Ä–∞–±–æ—Ç–µ
            try:
                await bot.send_message(
                    user_id, text, parse_mode="HTML", reply_markup=open_kb
                )
                logger.info(f"notify_opened: sent to {user_id}")
            except Exception as e:
                logger.error(f"notify_opened: failed to send to {user_id}: {e}")
                continue
    except Exception:
        pass


async def reminder_job(bot):
    try:
        open_orders = await get_open_orders_older_than(60)
        if not open_orders:
            return

        for idx, order in enumerate(open_orders):
            if idx > 0:
                await asyncio.sleep(5)
            if order.get("shown_to_bot") == 1:
                logger.info(f"reminder: order {order.get('id')} already shown, skipping")
                continue

            active_manager_ids = set(await get_progress_manager_ids())
            admin_id = await config.get_admin_id()
            allowed_users = set(
                [
                    uid
                    for uid in (await config.get_allowed_users() or [])
                    if isinstance(uid, int) and uid > 100000
                ]
            )
            targets = [
                uid
                for uid in allowed_users
                if uid and uid != admin_id and uid not in active_manager_ids
            ]
            dealer_text = ""
            dealer_id = order.get("dealer_id")

            logger.info(f"open_orders: {dealer_id}")
            if dealer_id:
                dealer = await get_dealer_by_id(dealer_id)
                logger.info(f"dealer: {dealer}")
                if dealer:
                    photo = dealer.get("photo")
                    parts = []
                    if dealer.get("name"):
                        if str(dealer["name"]).strip() not in ("", "0", None):
                            parts.append(str(dealer["name"]))

                    if dealer.get("company_name"):
                        if str(dealer["company_name"]).strip() not in ("", "0", None):
                            parts.append(str(dealer["company_name"]))

                    if dealer.get("phone"):
                        if str(dealer["phone"]).strip() not in ("", "0", None):
                            parts.append(str(dealer["phone"]))

                    if dealer.get("address"):
                        if str(dealer["address"]).strip() not in ("", "0", None):
                            parts.append(str(dealer["address"]))
                    dealer_photo = dealer.get("photo")
                    if dealer_photo:
                        local_path = os.path.join("/usr/src/app/storage", dealer_photo)
                        if os.path.exists(local_path):
                            photo_obj = FSInputFile(local_path)
                    if parts:
                        dealer_text = "\n<b>üë®‚Äçüíª –î–∏–ª–µ—Ä:</b>\n"+ "" + "\n".join(parts)
                    
            company_id = order.get("company_id")
            logger.info(f"open_orders: {dealer_text}")
            if order.get("url_users"):
                link_text = f"\n<b>üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ:</b> {order['url_users']}"
            if company_id:
                company = await get_company_by_id(company_id)
                if company:
                    company_text = []
                    company_text.append(
                        "\nüè¢<b> –ö–æ–º–ø–∞–Ω–∏—è: </b>\n" +
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: " + (company.get("name") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") +
                        "\n–ò–ù–ù: " + (company.get("INN") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") +
                        "\n–ê–¥—Ä–µ—Å: " + (company.get("OGRN") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") +
                        "\n–¢–µ–ª–µ—Ñ–æ–Ω: " + (company.get("phone") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") +
                        "\nE-mail: " + (company.get("email") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    )
                else:
                    company_text = ""
            else:
                company_text = ""
            order_brand = order.get('brand','')
            order_model = order.get('model','')
            order_year = order.get('year','')
            order_mileage = order.get('mileage','')
            order_power = order.get('power','')
            if order_brand and order_model:
                text1 = f"üöó <b>{order_brand} {order_model}</b>"
                details_list = []
                if order_year:
                    details_list.append(f"{order_year} –≥.")
                if order_mileage:
                    details_list.append(f"{order_mileage} –∫–º")
                if order_power:
                    details_list.append(f"{order_power} –ª.—Å.")

                if details_list:
                    text1 += "\n" + "  ".join(details_list)
                if order.get("opened_at"):
                    date = order.get('opened_at')
                    # date_data = datetime.fromisoformat(date) 
                    formatted = date.strftime("%d.%m.%Y %H:%M:%S")
                    date_create = f"<b>üìÖ –°–æ–∑–¥–∞–Ω:</b> {formatted}\n"
            text = (
                "üîî <b>–û—Ç–∫—Ä—ã—Ç—ã–π –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –æ—Å–º–æ—Ç—Ä—â–∏–∫–∞</b>\n\n" + text1 +
                f"\nüÜî –ó–∞–∫–∞–∑: {order.get('id')}\n" +
                date_create + link_text + '\n' + dealer_text + "\n" + company_text +
 
                "\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑."
            )
            open_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üì• –í–∑—è—Ç—å –∑–∞–∫–∞–∑",
                            callback_data=f"order_time_{order.get('id')}",
                        )
                    ]
                ]
            )
            for uid in targets:
                try:
                    if photo:
                        await bot.send_photo(
                        chat_id=uid,
                        photo=photo_obj,
                        caption=text,
                        parse_mode="HTML",
                        reply_markup=open_kb,
                    )
                    else:
                        await bot.send_message(
                            uid, text, parse_mode="HTML", reply_markup=open_kb
                        )
                    logger.info(f"reminder: sent to {uid} for order {order.get('id')}")
                except Exception as e:
                    logger.error(
                        f"reminder: failed to send to {uid} for order {order.get('id')}: {e}"
                    )
                    continue
            try:
                await mark_order_as_shown(order.get("id"))
                logger.info(f"reminder: shown_to_bot set True for order {order.get('id')}")
            except Exception as e:
                logger.error(f"reminder: failed to update shown_to_bot for order {order.get('id')}: {e}")

                
    except Exception as e:
        logger.error(f"reminder_job top-level error: {e}\n{traceback.format_exc()}")

async def notify_manager_departure(bot, order_id: int, manager_id: int, arrival_time: datetime):
    try:
        if isinstance(arrival_time, datetime):
            arrival_time = arrival_time + timedelta(hours=3)
            text_manager = f"üöó –ú–µ–Ω–µ–¥–∂–µ—Ä <b>{manager_id}</b> –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –∑–∞ –∑–∞–∫–∞–∑–æ–º <b>{order_id}</b> –∏ –ø—Ä–∏–±—É–¥–µ—Ç –≤ <b>{arrival_time} (–ú–°–ö)</b>."
        else: 
            if manager_id != 'NULL':
                text_manager = f"üöó –ú–µ–Ω–µ–¥–∂–µ—Ä <b>{manager_id}</b> –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –∑–∞ –∑–∞–∫–∞–∑–æ–º <b>{order_id}</b> –∏ –ø—Ä–∏–±—É–¥–µ—Ç –±–æ–ª–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞"
        allowed_groups = set(
            uid
            for uid in (await config.get_allowed_groups() or [])
            if isinstance(uid, int)
        )

        for uid in allowed_groups:
            message_thread = await get_thread_clients(uid)
            try:
                await bot.send_message(uid, text_manager, parse_mode="HTML", message_thread_id=message_thread)
                logger.info(f"reminder: sent manager info to {uid} for order {order_id}")
            except Exception as e:
                logger.error(f"reminder: failed to send manager info to {uid}: {e}")
                continue
        event = {
            "type": "bids",
            "title": "üöó <b>–û—Å–º–æ—Ç—Ä—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –∑–∞ –∑–∞–∫–∞–∑–æ–º</b>\n\n",
            "text": text_manager,
            "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        }
        await push_notification_to_redis(event)
    except Exception as e:
        logger.error(f"notify_manager_departure error: {e}")


async def notify_manager_arrived(bot, order_id: int, manager_id: int):
    try:
        text_manager = f"üì∑ –û—Å–º–æ—Ç—Ä—â–∏–∫ <b>{manager_id}</b>, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∫ –∑–∞–∫–∞–∑—É <b>{order_id}</b> –ø—Ä–∏–±—ã–ª –Ω–∞ –º–µ—Å—Ç–æ –∏ –Ω–∞—á–∞–ª —Å—ä–µ–º–∫—É –∞–≤—Ç–æ."

        event = {
            "type": "bids",
            "title": "üöó <b>–û—Å–º–æ—Ç—Ä—â–∏–∫ –ø—Ä–∏–±—ã–ª –Ω–∞ –º–µ—Å—Ç–æ —Å—ä–µ–º–∫–∏</b>\n\n",
            "text": text_manager,
            "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        }
        await push_notification_to_redis(event)
        allowed_groups = set(
            uid
            for uid in (await config.get_allowed_groups() or [])
            if isinstance(uid, int)
        )
        for uid in allowed_groups:
            message_thread = await get_thread_clients(uid)
            try:
                await bot.send_message(uid, text_manager, parse_mode="HTML", message_thread_id=message_thread)
                logger.info(f"reminder: sent manager info to {uid} for order {order_id}")
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ {uid}")
                continue

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ {uid}")



async def reminder_open_bids(bot):
    try:
        open_orders = await get_open_orders_older_than(60)
        count = len(open_orders)
        if not open_orders:
            return

        text = (
            f"üîî –í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏.\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: <b> {count} </b>"
        )
        active_manager_ids = set(await get_progress_manager_ids())
        admin_id = await config.get_admin_id()
        allowed_users = set(
            uid
            for uid in (await config.get_allowed_users() or [])
            if isinstance(uid, int)
        )
        logger.info(f"allowed_users {allowed_users}")
        targets = [
            uid
            for uid in allowed_users
            if uid and uid != admin_id and uid not in active_manager_ids
        ]
        logger.info(f"LALALALA {targets}")
        orders = await get_open_orders_with_opened_at()

        for uid in targets:
            try:
                await bot.send_message(uid, text, parse_mode="HTML", reply_markup=get_orders_with_opened_keyboard(orders))
                logger.info(f"reminder: sent to {uid} about open bids")
            except Exception as e:
                logger.error(f"reminder: failed to send to {uid}: {e}")
                continue

    except Exception as e:
        logger.error(f"reminder_open_bids error: {e}")


async def notify_admin_manager_decline(bot, order, manager_id: int, reason: str):
    admin_id = await config.get_admin_id()
    if not admin_id:
        return
    await bot.send_message(
        admin_id,
        (
            "‚ö†Ô∏è <b>–û—Å–º–æ—Ç—Ä—â–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞</b>\n\n"
            f"üöó <b>{order.get('brand','')} {order.get('model','')}</b>\n"
            f"üÜî –ó–∞–∫–∞–∑: {order.get('id')}\n"
            f"üë§ –û—Å–º–æ—Ç—Ä—â–∏–∫: {manager_id}\n"
        ),
        parse_mode="HTML",
    )
    event = {
        "type": "bids",
        "title": "‚ö†Ô∏è <b>–û—Å–º–æ—Ç—Ä—â–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞</b>\n\n",
        "text": f"üöó <b>{order.get('brand','')} {order.get('model','')}</b>\nüÜî –ó–∞–∫–∞–∑: {order.get('id')}\nüë§ –û—Å–º–æ—Ç—Ä—â–∏–∫: {manager_id}\n",
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    }
    await push_notification_to_redis(event)


async def send_files_to_admin(
    order_id: str, photographer_user_id: int, bot, is_rework: bool = False
):
    try:
        
        admin_id = await config.get_admin_id()
        if admin_id is None:
            logger.error("–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        order = await get_order_by_id(int(order_id))
        files = get_user_files(photographer_user_id, order_id)
        if is_rework:

            def is_additional_file(f):
                stage_ok = f.get("stage") == "üì∑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
                name = os.path.basename(f.get("path", ""))
                prefix_ok = name.startswith(
                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ_–º–∞—Ç–µ—Ä–∏–∞–ª—ã_"
                ) or name.startswith("üì∑_–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ_–º–∞—Ç–µ—Ä–∏–∞–ª—ã_")
                return stage_ok or prefix_ok

            files = [f for f in files if is_additional_file(f)]

        checklist = await get_checklist_answers(int(order_id))

        prefix = (
            "üîÑ <b>–ó–∞–∫–∞–∑ –ø–æ—Å–ª–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏!</b>"
            if is_rework
            else "üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!</b>"
        )
        header_text = (
            f"{prefix}\n\n"
            f"<b>{order.get('brand', '')} {order.get('model', '')}</b>\n"
            f"\nüë§ –§–æ—Ç–æ–≥—Ä–∞—Ñ ID: {photographer_user_id}\n"
            f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}"
        )

        note_text = (
            f"<b>{order.get('brand', '')} {order.get('model', '')}</b>\n"
            f"üë§ –§–æ—Ç–æ–≥—Ä–∞—Ñ ID: {photographer_user_id}\n"
            f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}"
        )

        event = {
            "type": "bids",
            "title": prefix,
            "text": note_text,
            "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        }
        await push_notification_to_redis(event)

        await bot.send_message(admin_id, header_text, parse_mode="HTML")

        photos = [f for f in files if f.get("type") == "photo"]
        if photos:
            media_group = [
                InputMediaPhoto(media=FSInputFile(f["path"]))
                for f in photos[:MAX_FILES_TO_SEND]
            ]
            if media_group:
                await bot.send_media_group(admin_id, media_group)

        for f in [f for f in files if f.get("type") == "video"]:
            await bot.send_video(admin_id, FSInputFile(f["path"]))

        cp1 = checklist.get("checklist_point1") if isinstance(checklist, dict) else None
        cp2 = checklist.get("checklist_point2") if isinstance(checklist, dict) else None

        def _fmt(val):
            if val is None or str(val).strip() == "":
                return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            return str(val)

        q1_label = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–º–ø–µ—Ä–∞"
        q2_label = "–£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞ –≤ –±–∞–∫–µ"
        checklist_text = (
            "üìã <b>–ß–µ–∫–ª–∏—Å—Ç:</b>\n"
            f"{q1_label}: {_fmt(cp1)}\n"
            f"{q2_label}: {_fmt(cp2)}\n"
        )
        await bot.send_message(admin_id, checklist_text, parse_mode="HTML")

        kb = get_admin_order_keyboard(int(order_id))
        action_text = (
            "–ó–∞–∫–∞–∑ –ø–æ—Å–ª–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ - –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            if is_rework
            else "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:"
        )
        await bot.send_message(admin_id, action_text, reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É: {e}")


async def send_pending_orders_to_new_admin(bot, admin_id: int):
    try:
        review_orders = await get_all_orders_by_status(["review"])

        if not review_orders:
            await bot.send_message(admin_id, "üìã –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return

        await bot.send_message(
            admin_id,
            f"üìã <b>–ù–∞–π–¥–µ–Ω–æ {len(review_orders)} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</b>\n"
            f"–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –∑–∞—è–≤–∫–∏...",
            parse_mode="HTML",
        )

        for order in review_orders:
            try:
                manager_id = order.get("manager_id")
                if manager_id:
                    await send_files_to_admin(
                        order["id"], manager_id, bot, is_rework=False
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ {order.get('id')}: {e}")

        await bot.send_message(admin_id, "‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–æ–∫: {e}")
        await bot.send_message(admin_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–æ–∫.")
