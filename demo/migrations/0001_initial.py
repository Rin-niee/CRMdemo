<<<<<<< Updated upstream
# Generated by Django 5.1.3 on 2025-08-14 04:29
=======
# Generated by Django 5.2 on 2025-09-02 11:24
>>>>>>> Stashed changes

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
<<<<<<< Updated upstream
=======
        ("auth", "0012_alter_user_first_name_max_length"),
>>>>>>> Stashed changes
    ]

    operations = [
        migrations.CreateModel(
<<<<<<< Updated upstream
            name='Client',
=======
            name="Client",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("phone", models.CharField(max_length=15)),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Клиент",
                "verbose_name_plural": "Клиенты",
                "db_table": "clients",
            },
        ),
        migrations.CreateModel(
            name="Companies",
>>>>>>> Stashed changes
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, verbose_name="Наименование компании"
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Код присоединения к компании",
                    ),
                ),
                (
                    "INN",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="ИНН компании",
                    ),
                ),
                (
                    "OGRN",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="ОГРН компании",
                    ),
                ),
                (
                    "adress",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Юридический адрес",
                    ),
                ),
                (
                    "website",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Сайт компании",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, verbose_name="E-mail"
                    ),
                ),
                (
                    "is_approved",
                    models.BooleanField(default=False, verbose_name="Одобрено"),
                ),
            ],
<<<<<<< Updated upstream
=======
            options={
                "verbose_name": "Компания",
                "verbose_name_plural": "Компании",
                "db_table": "companies",
            },
        ),
        migrations.CreateModel(
            name="Dealers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Контактное лицо",
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        max_length=100,
                        verbose_name="Наименование компании(обязательно)",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Телефон компании",
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Адрес компании",
                    ),
                ),
                ("photo", models.FileField(blank=True, upload_to="dealers/%Y/%m/%d/")),
            ],
            options={
                "verbose_name": "Дилер",
                "verbose_name_plural": "Дилеры",
                "db_table": "dealers",
            },
        ),
        migrations.CreateModel(
            name="Groups",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tg_id", models.BigIntegerField()),
                ("inspection_id", models.IntegerField()),
                ("clients_id", models.IntegerField()),
                ("calls_id", models.IntegerField()),
            ],
            options={
                "verbose_name": "Группа",
                "verbose_name_plural": "Группы",
                "db_table": "groups",
            },
        ),
        migrations.CreateModel(
            name="Status_orders",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_status",
                    models.CharField(
                        choices=[
                            ("payment", "Оплата"),
                            ("parking", "Прибытие на парковку"),
                            ("preparation", "Подготовка к экспорту"),
                            ("bill_of_lading", "Коносамент"),
                            ("port_transport", "Транспортировка в порт"),
                            ("port_arrival", "Прибытие в порт"),
                            ("order_received", "Заказ получен"),
                        ],
                        default="payment",
                        max_length=50,
                    ),
                ),
            ],
            options={
                "verbose_name": "Статус",
                "verbose_name_plural": "Статусы",
                "db_table": "statuses",
            },
>>>>>>> Stashed changes
        ),
        migrations.CreateModel(
            name="StatusFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to="docs/%Y/%m/%d/")),
                (
                    "doc_type",
                    models.CharField(
                        choices=[
                            ("payment", "Оплата"),
                            ("parking", "Прибытие на парковку"),
                            ("preparation", "Подготовка к экспорту"),
                            ("bill_of_lading", "Коносамент"),
                            ("port_transport", "Транспортировка в порт"),
                            ("port_arrival", "Прибытие в порт"),
                            ("order_received", "Заказ получен"),
                        ],
                        max_length=50,
                    ),
                ),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
            ],
<<<<<<< Updated upstream
=======
            options={
                "verbose_name": "Файл к статусам",
                "verbose_name_plural": "Файлы к статусам",
                "db_table": "status_orders_files",
            },
>>>>>>> Stashed changes
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="ФИО пользователя",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        default="client",
                        max_length=20,
                        verbose_name="Роль пользователя",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="Номер телефона",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
<<<<<<< Updated upstream
        ),
        migrations.CreateModel(
            name='TGUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chat_id', models.IntegerField()),
=======
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
                "db_table": "user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
>>>>>>> Stashed changes
            ],
        ),
        migrations.CreateModel(
            name="bid",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Бренд"
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Модель"
                    ),
                ),
                (
                    "year",
                    models.IntegerField(blank=True, null=True, verbose_name="Год"),
                ),
                (
                    "mileage",
                    models.IntegerField(blank=True, null=True, verbose_name="Пробег"),
                ),
                (
                    "fuel_type",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Тип топлива",
                    ),
                ),
                (
                    "drive_type",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Тип привода",
                    ),
                ),
                (
                    "engine",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Двигатель"
                    ),
                ),
                (
                    "power",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Мощность двигателя",
                    ),
                ),
                (
                    "transmission",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Коробка передач",
                    ),
                ),
                ("create_at", models.DateTimeField(auto_now_add=True)),
                ("last_update", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("disable", "Disable"), ("open", "Open")],
                        default="disable",
                        max_length=20,
                        verbose_name="Статус заявки",
                    ),
                ),
                (
                    "deadline",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Исполняющий менеджер"
                    ),
                ),
                (
                    "url_users",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Исходная ссылка на авто",
                    ),
                ),
                (
                    "url",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Конечная ссылка на авто",
                    ),
                ),
                ("opened_at", models.DateTimeField(blank=True, null=True)),
                ("arrived_time", models.DateTimeField(blank=True, null=True)),
                (
                    "checklist_point1",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Состояние бампера",
                    ),
                ),
                (
                    "checklist_point2",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Уровень топлива в баке",
                    ),
                ),
                (
                    "shown_to_bot",
                    models.BooleanField(
                        default=False, verbose_name="Уведомление боту показано"
                    ),
                ),
                (
                    "in_stock",
                    models.BooleanField(default=False, verbose_name="Авто в наличии"),
                ),
                (
                    "caller_saw",
                    models.BooleanField(
                        default=False, verbose_name="Отправлено в чат просмотрщиков"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="demo.companies",
                        verbose_name="Компания",
                    ),
                ),
                (
                    "dealer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="demo.dealers",
                        verbose_name="Дилер",
                    ),
                ),
            ],
<<<<<<< Updated upstream
=======
            options={
                "verbose_name": "Заявка",
                "verbose_name_plural": "Заявки",
                "db_table": "bid",
            },
        ),
        migrations.CreateModel(
            name="CarsPhoto",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file_url", models.FileField(upload_to="")),
                (
                    "bid",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="photos",
                        to="demo.bid",
                    ),
                ),
            ],
            options={
                "verbose_name": "Фото",
                "verbose_name_plural": "Фото",
                "db_table": "photo",
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("VIN", models.CharField(max_length=100)),
                ("number_order", models.CharField(max_length=100)),
                ("number_note", models.CharField(max_length=100)),
                ("date", models.DateField(auto_now_add=True)),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="demo.client"
                    ),
                ),
                (
                    "status",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="demo.status_orders",
                    ),
                ),
            ],
            options={
                "verbose_name": "Заказ",
                "verbose_name_plural": "Заказы",
                "db_table": "orders",
            },
>>>>>>> Stashed changes
        ),
        migrations.AddField(
            model_name="status_orders",
            name="files",
            field=models.ManyToManyField(
                blank=True, related_name="orders", to="demo.statusfile"
            ),
        ),
<<<<<<< Updated upstream
=======
        migrations.CreateModel(
            name="TGUsers",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID пользователя в телеграм",
                    ),
                ),
                ("is_admin", models.BooleanField(default=0)),
                ("is_caller", models.BooleanField(default=0)),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="demo.groups",
                    ),
                ),
            ],
            options={
                "verbose_name": "Менеджер",
                "verbose_name_plural": "Менеджеры",
                "db_table": "users",
            },
        ),
        migrations.AddField(
            model_name="bid",
            name="manager",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="demo.tgusers",
            ),
        ),
        migrations.CreateModel(
            name="user_company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("owner", "Владелец"),
                            ("manager", "Менеджер"),
                            ("leading_manager", "Ведущий менеджер"),
                            ("logist", "Логист"),
                        ],
                        default="manager",
                        max_length=100,
                    ),
                ),
                (
                    "company_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="demo.companies"
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Сотрудник компании",
                "verbose_name_plural": "Сотрудники компании",
                "db_table": "user_company",
            },
        ),
>>>>>>> Stashed changes
    ]
